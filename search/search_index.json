{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udcb2\ud83d\udcb2\ud83d\udcb2 Budget Busters: New Year, New Numbers \ud83d\udcb2\ud83d\udcb2\ud83d\udcb2","text":"Budget Busters <p>Your go-to companion for financial empowerment!</p> <p>GitHub Repository</p> <p>Deployed Site</p>"},{"location":"#about-submission","title":"\ud83d\udcc4 About Submission","text":"<p>Welcome to BudgetBuddy, your go-to companion for financial empowerment! BudgetBuddy is a comprehensive budgeting app designed to assist users in making informed financial decisions, helping them achieve their financial goals with ease and confidence. We created BudgetBuddy to simplify the expense and income tracking process. There are tools out there that make something as simple (and important!) as your finances so difficult. BudgetBuddy gives you a straightforward way to keep you on track to your savings goals.</p>"},{"location":"#documentation-index","title":"\ud83d\udcda Documentation Index","text":"<ol> <li>Criteria</li> <li>Deployment</li> <li>Testing</li> <li>Tech</li> </ol>"},{"location":"#goal","title":"\ud83c\udfaf Goal","text":"<p>The goal of this README is to provide a clear and concise overview of the project or software. It details the main objective and its relevance to user needs. The key aspects are organized into tables for better readability.</p> Aspect Description Problem Statement Many financial tools complicate the essential task of tracking expenses and income, leading to ineffective financial management and hindering users from reaching their savings goals. Objective(s) 1. Simplify the tracking of expenses and income for all users.2. Offer a user-friendly and comprehensive budgeting tool.3. Assist users in setting and adhering to financial goals, personal or household, short-term or long-term.4. Display financial data clearly to help users identify areas for improvement. Target Audience Individuals seeking a simple yet effective method to manage personal finances, especially those who find existing financial tools too complex and prefer an intuitive approach. Benefits 1. Ease of Use: Clean, intuitive interface for effortless financial tracking.2. Financial Clarity: Better understanding of financial situations for improved decision-making.3. Goal Achievement: Effective tracking of expenses and income to reach financial goals.4. Accessibility: Responsive design for finance management across various devices at any time."},{"location":"credits/credits/","title":"Credits","text":"<ul> <li>StartBootstrap Small Business Template - for the template used to create the foundations of the BudgetBuddy website.</li> <li>Cooolours - for the colour palette used in the BudgetBuddy website.</li> <li>Adobe XD - for the wireframes used to design the BudgetBuddy website.</li> <li>Unsplash - for the images used on the About page.</li> <li>ChatGPT - Logo Design: ChatGPT played a crucial role in conceptualizing and creating the logo for our website.</li> <li>ChatGPT - The tool also assisted in formalizing and refining the content for our website, ensuring clarity and coherence in our messaging.</li> </ul>"},{"location":"criteria/criteria/","title":"Criteria","text":"Criteria BudgetBuddy's Functionality Creative Design BudgetBuddy boasts a creative and visually appealing design that enhances the user experience. It incorporates modern components for a clean and intuitive interface, ensuring users can navigate effortlessly. Real-World Use Case BudgetBuddy serves as a valuable tool for personal finance management. It empowers users to establish weekly, monthly, and yearly budgets, track income and expenses, making it an indispensable resource for effective financial planning. Responsive and Accessible BudgetBuddy's responsive design, built with Bootstrap, guarantees a seamless experience across various screen sizes. This adaptability ensures accessibility and convenience for users who manage their finances on diverse devices. Well-Planned Development BudgetBuddy's development is meticulously organized through GitHub Projects. This includes comprehensive issue tracking, careful feature prioritization, and meticulous progress monitoring, resulting in a structured and efficient development process. Comprehensive README The README for BudgetBuddy is comprehensive and adheres to the provided template, offering clear and detailed information to users, developers, and contributors."},{"location":"criteria/criteria/#user-stories","title":"User Stories","text":""},{"location":"criteria/criteria/#new-site-users","title":"New Site Users","text":"<ul> <li> <p>Demo for Budget Planning: As a new visitor, I want to access a demo that guides me in budget planning, providing insights into how the website can assist me in financial planning.</p> </li> <li> <p>Effortless Sign-Up: As a new user, I seek a straightforward sign-up option that enables me to create an account seamlessly.</p> </li> <li> <p>Financial Articles: I want to browse a wide range of financial articles as a user, empowering me to enhance my financial management skills.</p> </li> <li> <p>Account Creation: As a new site user, I desire the ability to create an account, initiating my journey toward setting up my personalized budget.</p> </li> <li> <p>Secure Login: As a registered user, I require secure and hassle-free access to my account, allowing me to retrieve and manage my budgeting information.</p> </li> <li> <p>Contact Option: For queries and communication, I seek a convenient contact option as a new site user, ensuring I can easily get in touch with the platform.</p> </li> <li> <p>FAQ Access: I want access to a FAQ section as a user, offering solutions to common questions, eliminating the need for direct support contact.</p> </li> <li> <p>Learn About the Company: As a user, I aim to gain insights into the company's mission and values, fostering confidence in utilizing the website.</p> </li> </ul>"},{"location":"criteria/criteria/#returning-site-users","title":"Returning Site Users","text":"<ul> <li> <p>Efficient Log-In: As a returning user, I expect a straightforward log-in process, enabling quick access to my account for continued budget management and personalized content.</p> </li> <li> <p>Dashboard Overview: I want to log in and swiftly access my dashboard as a returning user, granting me a comprehensive overview of my financial situation.</p> </li> <li> <p>Income Management: Returning users seek the capability to effortlessly add and categorize their income on the dashboard, providing clarity on earnings sources.</p> </li> <li> <p>Expense Tracking: I aspire to record and categorize my expenses effortlessly as a returning user, ensuring a detailed overview of my spending habits and better financial management.</p> </li> <li> <p>Financial Goals: Returning users desire the ability to set financial goals on weekly, monthly, and yearly bases, facilitating savings and spending planning for short-term and long-term objectives.</p> </li> <li> <p>Detailed Reports: I require the capability to generate reports encompassing income, expenses, and goal progress as a returning user, facilitating a comprehensive understanding of my financial planning.</p> </li> <li> <p>Data Security: All users expect their financial data to be handled securely and privately, establishing trust in the platform's handling of sensitive information.</p> </li> </ul>"},{"location":"deployment/deployment/","title":"Deployment","text":"<p>You can find the live deployed application on Heroku. This link will take you to the live version of your project.</p>"},{"location":"deployment/deployment/#elephantsql-database","title":"ElephantSQL Database","text":"<p>This project relies on ElephantSQL for the PostgreSQL Database. To set up your own Postgres Database, follow these steps:</p> <ol> <li>Click on Create New Instance to start a new database.</li> <li>Provide a name, which is often the name of the project (e.g., \"janhackathonteam11\").</li> <li>Choose the Tiny Turtle (Free) plan.</li> <li>Leave the Tags field blank.</li> <li>Select the Region and Data Center closest to your location.</li> <li>Once created, click on the new database name to access the database URL and Password.</li> </ol>"},{"location":"deployment/deployment/#cloudinary-api","title":"Cloudinary API","text":"<p>This project utilizes the Cloudinary API to store media assets online because Heroku doesn't persist this type of data. To obtain your Cloudinary API key, follow these steps:</p> <ol> <li>Create an account on Cloudinary and log in.</li> <li>For your Primary interest, select Programmable Media for image and video API.</li> <li>Optionally, edit your assigned cloud name to something more memorable.</li> <li>On your Cloudinary Dashboard, copy your API Environment Variable.</li> <li>Ensure you remove the <code>CLOUDINARY_URL=</code> as part of the API value; this is the actual key.</li> </ol>"},{"location":"deployment/deployment/#heroku-deployment","title":"Heroku Deployment","text":"<p>This project uses Heroku, a platform as a service (PaaS) that allows developers to build, run, and operate applications entirely in the cloud. Follow these deployment steps after setting up your Heroku account:</p> <ol> <li>In your Heroku Dashboard, select New in the top-right corner and choose Create new app from the dropdown menu.</li> <li>Provide a unique app name, choose a region closest to you (EU or USA), and select Create App.</li> <li>In the new app's Settings, click Reveal Config Vars and set your environment variables as follows:</li> </ol> Key Value <code>CLOUDINARY_URL</code> cloudinary://423928569512371:Xds6g-KgHTsH_8ayPkb0vci23l4@ddll4c0zo <code>DATABASE_URL</code> postgres://fvnucmpd:fTkWXzsFK1mmwYZ6t7vlNHWNBpJz2DAd@manny.db.elephantsql.com/fvnucmpd <code>DISABLE_COLLECTSTATIC</code> 1 (temporary, can be removed for the final deployment) <code>SECRET_KEY</code> 15q8j@52(%vztw)qq!&amp;jnxlf-n%-nq60m9asb1-nv14hx+_q6u <ol> <li>Heroku requires two additional files for proper deployment: <code>requirements.txt</code> and <code>Procfile</code>. Install this project's requirements with:</li> </ol> <pre><code>pip3 install -r requirements.txt\n</code></pre> <p>If you have your own installed packages, update the requirements file using:</p> <pre><code>pip3 freeze --local &gt; requirements.txt\n</code></pre> <ol> <li>Create a Procfile with the following command:</li> </ol> <pre><code>echo web: gunicorn app_name.wsgi &gt; Procfile\n</code></pre> <p>Replace app_name with your primary Django app's name, the folder where settings.py is located.</p> <ol> <li> <p>To connect your GitHub repository to the app, you can either choose Automatic Deployment from the Heroku app or use the Terminal/CLI:</p> </li> <li> <p>Connect to Heroku: <code>heroku login -i</code></p> </li> <li>Set the remote for Heroku: <code>heroku git:remote -a app_name</code> (replace app_name with your app name)</li> <li> <p>After standard Git <code>add</code>, <code>commit</code>, and <code>push</code> to GitHub, deploy to Heroku with:</p> <pre><code>git push heroku main\n</code></pre> </li> </ol> <p>Your project should now be connected and deployed to Heroku.</p> <p>You can access the deployed project at http://your-deployed-link.com.</p>"},{"location":"deployment/deployment/#local-deployment","title":"Local Deployment","text":"<p>This project can be cloned or forked to create a local copy on your system.</p> <p>For either method, you'll need to install any necessary packages from the requirements.txt file:</p> <pre><code>pip3 install -r requirements.txt\n</code></pre> <p>Create a new file called <code>env.py</code> at the root-level and include the same environment variables from the Heroku deployment steps. Here's a sample <code>env.py</code> file:</p> <pre><code>import os\n\nos.environ.setdefault(\"CLOUDINARY_URL\", \"cloudinary://423928569512371:Xds6g-KgHTsH_8ayPkb0vci23l4@ddll4c0zo\")\nos.environ.setdefault(\"DATABASE_URL\", \"postgres://fvnucmpd:fTkWXzsFK1mmwYZ6t7vlNHWNBpJz2DAd@manny.db.elephantsql.com/fvnucmpd\")\nos.environ.setdefault(\"SECRET_KEY\", \"15q8j@52(%vztw)qq!&amp;jnxlf-n%-nq60m9asb1-nv14hx+_q6u\")\n\n# local environment only (do not include these in production/deployment!)\nos.environ.setdefault(\"DEBUG\", \"True\")\n</code></pre> <p>Once the project is cloned or forked, you can run it locally by following these steps:</p> <ul> <li>Start the Django app: <code>python3 manage.py runserver</code></li> <li>Stop the app once it's loaded: <code>CTRL+C</code> or <code>\u2318+C</code> (Mac)</li> <li>Make any necessary migrations: <code>python3 manage.py makemigrations</code></li> <li>Migrate the data to the database: <code>python3 manage.py migrate</code></li> <li>Create a superuser: <code>python3 manage.py createsuperuser</code></li> <li>Load fixtures (if applicable): <code>python3 manage.py loaddata file-name.json</code> (repeat for each file)</li> <li>Everything should be ready now, so run the Django app again: <code>python3 manage.py runserver</code></li> </ul>"},{"location":"deployment/deployment/#cloning","title":"Cloning","text":"<p>To clone the repository, follow these steps:</p> <ol> <li>Go to the GitHub repository.</li> <li>Locate the \"Code\" button above the list of files and click it.</li> <li>Select your preferred cloning method (HTTPS, SSH, or GitHub CLI) and click the copy button to copy the URL to your clipboard.</li> <li>Open Git Bash or Terminal.</li> <li>Change the current working directory to the location where you want the cloned directory.</li> <li>In your IDE Terminal, type the following command to clone the repository:</li> </ol> <pre><code>git clone https://github.com/JesseRoss001/janhackathonteam11.git\n</code></pre> <ol> <li>Press Enter to create your local clone.</li> </ol> <p>If you are using Gitpod, you can create your own workspace using this repository by clicking the \"Open in Gitpod\" button. Note that you need to have the Gitpod browser extension installed for direct project opening in Gitpod.</p>"},{"location":"deployment/deployment/#forking","title":"Forking","text":"<p>Forking the GitHub Repository creates a copy of the original repository on your GitHub account. It allows you to view and make changes without affecting the original owner's repository. Here's how to fork this repository:</p> <ol> <li>Log in to GitHub and visit the GitHub Repository.</li> <li>Above the \"Settings\" button on the repository's menu, locate the \"Fork\" button.</li> <li>Click the \"Fork\" button.</li> <li>You should now have a copy of the original repository in your GitHub account.</li> </ol>"},{"location":"tech/tech/","title":"Tech","text":"<ul> <li> <p>HTML: HTML is used for the main site content. It's the standard markup language for creating web pages.</p> </li> <li> <p>CSS: CSS is used for the main site design and layout. It's responsible for styling the web pages.</p> </li> <li> <p>CSS :root variables: CSS :root variables are used for reusable styles throughout the site, making it easier to maintain consistent styles.</p> </li> <li> <p>CSS Flexbox: CSS Flexbox is used for an enhanced responsive layout, allowing for flexible and efficient alignment of elements.</p> </li> <li> <p>CSS Grid: CSS Grid is used for an enhanced responsive layout, providing a grid-based structure for web page components.</p> </li> <li> <p>JavaScript: JavaScript is used for user interaction on the site. It's a versatile programming language for web development.</p> </li> <li> <p>Python: Python is used as the back-end programming language. It's known for its simplicity and readability.</p> </li> <li> <p>Git: Git is used for version control, including commands like <code>git add</code>, <code>git commit</code>, and <code>git push</code>.</p> </li> <li> <p>GitHub: GitHub is used for secure online code storage, collaboration, and version control.</p> </li> <li> <p>GitHub Pages: GitHub Pages is used for hosting the deployed front-end site, making it accessible to users.</p> </li> <li> <p>Gitpod: Gitpod is used as a cloud-based Integrated Development Environment (IDE) for development convenience.</p> </li> <li> <p>Bootstrap: Bootstrap is used as the front-end CSS framework for modern responsiveness and pre-built components, speeding up development.</p> </li> <li> <p>Django: Django is used as another Python framework for the site, known for its robustness and features.</p> </li> <li> <p>ElephantSQL: ElephantSQL is used as a relational database management system, facilitating data storage.</p> </li> <li> <p>Postgres: Postgres is used as the database system, known for its reliability and performance.</p> </li> <li> <p>Heroku: Heroku is used for hosting the deployed back-end site, providing a scalable platform.</p> </li> <li> <p>Cloudinary: Cloudinary is used for online static file storage, making it easier to manage and serve media files.</p> </li> </ul>"},{"location":"testing/testing/","title":"Testing","text":""},{"location":"testing/testing/#code-validation","title":"Code Validation","text":""},{"location":"testing/testing/#html","title":"HTML","text":"<p>I have used the recommended HTML W3C Validator to validate all of my HTML files.</p> Page W3C URL Screenshot Notes Home W3C Section lacks header h2-h6 warning Contact W3C Obsolete iframe warnings"},{"location":"testing/testing/#css","title":"CSS","text":"<p>I have used the recommended CSS Jigsaw Validator to validate all of my CSS files.</p> File Jigsaw URL Screenshot Notes style.css Jigsaw Pass: No Errors"},{"location":"testing/testing/#javascript","title":"JavaScript","text":"<p>I have used the recommended JShint Validator to validate all of my JS files.</p> File Screenshot Notes script.js Unused variables from external files"},{"location":"testing/testing/#python","title":"Python","text":"<p>I have used the recommended PEP8 CI Python Linter to validate all of my Python files.</p> File CI URL Screenshot Notes run.py PEP8 CI W291 trailing whitespace <p>IMPORTANT: Django settings.py</p> <p>The Django settings.py file comes with 4 lines that are quite long and will throw the <code>E501 line too long</code> error. This is default behavior but can be fixed by adding <code># noqa</code> to the end of those lines.</p> <p>Example:</p> <pre><code>AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",  # noqa\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",  # noqa\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",  # noqa\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.NumericPasswordValidator\",  # noqa\n    },\n]\n</code></pre> <p>IMPORTANT: migration and pycache files</p> <p>You do not have to ever validate files from the <code>migrations/</code> or <code>pycache/</code> folders! Ignore these <code>.py</code> files, and validate just the files that you've created or modified.</p>"},{"location":"testing/testing/#browser-compatibility","title":"Browser Compatibility","text":"<p>I've tested my deployed project on multiple browsers to check for compatibility issues.</p> Browser Home About Contact etc Notes Chrome Works as expected"},{"location":"testing/testing/#responsiveness","title":"Responsiveness","text":"<p>I've tested my deployed project on multiple devices to check for responsiveness issues.</p> Device Home About Contact etc Notes Mobile (DevTools) Works as expected Tablet (DevTools) Works as expected Desktop Works as expected"}]}